{"ast":null,"code":"var _jsxFileName = \"/Users/giusepp.demarino/Desktop/ctv-react-app/src/components/ChannelsInfo.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nvar ChannelsInfo = function ChannelsInfo(_ref) {\n  var categories = _ref.categories;\n  return React.createElement(\"section\", {\n    className: \"channels__selection-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, categories && categories.map(function (programme) {\n    var programmeEmbedded = programme._embedded.latestProduction;\n    var episodes = programmeEmbedded.episode ? programmeEmbedded.episode : 'N/A';\n    return React.createElement(\"div\", {\n      key: programme.id,\n      className: \"row channels__selection-info-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"col-md-4\",\n      alt: '',\n      src: programmeEmbedded._links.image.href,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-md-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"channels__selection-info-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, programme.title), React.createElement(\"p\", {\n      className: \"channels__selection-info-synopses\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, programme.synopses.ninety), React.createElement(\"p\", {\n      className: \"channels__selection-info-duration\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"Duration:\"), ' ', React.createElement(\"span\", {\n      className: \"channels__selection-info-brodcast-duration\",\n      key: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, programmeEmbedded.duration.display)), React.createElement(\"p\", {\n      className: \"channels__selection-info-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"Category:\"), ' ', programmeEmbedded._embedded.categories.map(function (category, i) {\n      return React.createElement(\"span\", {\n        className: \"channels__selection-info-category-name\",\n        key: category.name + i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, category.name, ' - ');\n    })), React.createElement(\"p\", {\n      className: \"channels__selection-info-brodcast-day\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Broadcast day:\"), ' ', React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, moment(programmeEmbedded.broadcastDateTime.commissioning).format('DD/M/YYYY'))), React.createElement(\"p\", {\n      className: \"channels__selection-info-brodcast-time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Broadcast time:\"), ' ', React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, moment(programmeEmbedded.broadcastDateTime.commissioning).format('LT'))), React.createElement(\"p\", {\n      className: \"channels__selection-info-episodes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Episode number:\"), ' ', React.createElement(\"span\", {\n      className: \"channels__selection-info-episodes-number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, episodes)), React.createElement(\"p\", {\n      className: \"channels__selection-info-channel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Channel:\"), ' ', React.createElement(\"span\", {\n      className: \"channels__selection-info-channel-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, programmeEmbedded._embedded.channel.name, \" -\"), React.createElement(\"span\", {\n      className: \"channels__selection-info-channel-strapline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, programmeEmbedded._embedded.channel.strapline))));\n  }));\n};\n\nChannelsInfo.propTypes = {\n  channels: PropTypes.string,\n  categories: PropTypes.array\n};\nexport default ChannelsInfo;","map":{"version":3,"sources":["/Users/giusepp.demarino/Desktop/ctv-react-app/src/components/ChannelsInfo.js"],"names":["React","PropTypes","moment","ChannelsInfo","categories","map","programme","programmeEmbedded","_embedded","latestProduction","episodes","episode","id","_links","image","href","title","synopses","ninety","duration","display","category","i","name","broadcastDateTime","commissioning","format","channel","strapline","propTypes","channels","string","array"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nconst ChannelsInfo = ({ categories }) => {\n  return (\n    <section className='channels__selection-info'>\n      {categories &&\n        categories.map(programme => {\n          const programmeEmbedded = programme._embedded.latestProduction;\n          const episodes = programmeEmbedded.episode ? programmeEmbedded.episode : 'N/A';\n\n          return (\n            <div key={programme.id} className='row channels__selection-info-wrapper'>\n              <img className='col-md-4' alt={''} src={programmeEmbedded._links.image.href} />\n              <div className='col-md-8'>\n                <h2 className='channels__selection-info-title'>{programme.title}</h2>\n                <p className='channels__selection-info-synopses'>{programme.synopses.ninety}</p>\n                <p className='channels__selection-info-duration'>\n                  <strong>Duration:</strong>{' '}\n                  <span className='channels__selection-info-brodcast-duration' key>\n                    {programmeEmbedded.duration.display}\n                  </span>\n                </p>\n\n                <p className='channels__selection-info-category'>\n                  <strong>Category:</strong>{' '}\n                  {programmeEmbedded._embedded.categories.map((category, i) => (\n                    <span\n                      className='channels__selection-info-category-name'\n                      key={category.name + i}\n                    >\n                      {category.name}\n                      {' - '}\n                    </span>\n                  ))}\n                </p>\n\n                <p className='channels__selection-info-brodcast-day'>\n                  <strong>Broadcast day:</strong>{' '}\n                  <span>\n                    {moment(programmeEmbedded.broadcastDateTime.commissioning).format('DD/M/YYYY')}\n                  </span>\n                </p>\n\n                <p className='channels__selection-info-brodcast-time'>\n                  <strong>Broadcast time:</strong>{' '}\n                  <span>\n                    {moment(programmeEmbedded.broadcastDateTime.commissioning).format('LT')}\n                  </span>\n                </p>\n\n                <p className='channels__selection-info-episodes'>\n                  <strong>Episode number:</strong>{' '}\n                  <span className='channels__selection-info-episodes-number'>{episodes}</span>\n                </p>\n\n                <p className='channels__selection-info-channel'>\n                  <strong>Channel:</strong>{' '}\n                  <span className='channels__selection-info-channel-name'>\n                    {programmeEmbedded._embedded.channel.name} -\n                  </span>\n                  <span className='channels__selection-info-channel-strapline'>\n                    {programmeEmbedded._embedded.channel.strapline}\n                  </span>\n                </p>\n              </div>\n            </div>\n          );\n        })}\n    </section>\n  );\n};\n\nChannelsInfo.propTypes = {\n  channels: PropTypes.string,\n  categories: PropTypes.array\n};\n\nexport default ChannelsInfo;\n"]},"metadata":{},"sourceType":"module"}